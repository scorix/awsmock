// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go-v2/feature/s3/manager (interfaces: HeadBucketAPIClient)

// Package s3mock is a generated GoMock package.
package s3mock

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockHeadBucketAPIClient is a mock of HeadBucketAPIClient interface.
type MockHeadBucketAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockHeadBucketAPIClientMockRecorder
}

// MockHeadBucketAPIClientMockRecorder is the mock recorder for MockHeadBucketAPIClient.
type MockHeadBucketAPIClientMockRecorder struct {
	mock *MockHeadBucketAPIClient
}

// NewMockHeadBucketAPIClient creates a new mock instance.
func NewMockHeadBucketAPIClient(ctrl *gomock.Controller) *MockHeadBucketAPIClient {
	mock := &MockHeadBucketAPIClient{ctrl: ctrl}
	mock.recorder = &MockHeadBucketAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeadBucketAPIClient) EXPECT() *MockHeadBucketAPIClientMockRecorder {
	return m.recorder
}

// HeadBucket mocks base method.
func (m *MockHeadBucketAPIClient) HeadBucket(arg0 context.Context, arg1 *s3.HeadBucketInput, arg2 ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBucket", varargs...)
	ret0, _ := ret[0].(*s3.HeadBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBucket indicates an expected call of HeadBucket.
func (mr *MockHeadBucketAPIClientMockRecorder) HeadBucket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBucket", reflect.TypeOf((*MockHeadBucketAPIClient)(nil).HeadBucket), varargs...)
}
