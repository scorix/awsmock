// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go-v2/feature/s3/manager (interfaces: DownloadAPIClient)

// Package s3mock is a generated GoMock package.
package s3mock

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockDownloadAPIClient is a mock of DownloadAPIClient interface.
type MockDownloadAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadAPIClientMockRecorder
}

// MockDownloadAPIClientMockRecorder is the mock recorder for MockDownloadAPIClient.
type MockDownloadAPIClientMockRecorder struct {
	mock *MockDownloadAPIClient
}

// NewMockDownloadAPIClient creates a new mock instance.
func NewMockDownloadAPIClient(ctrl *gomock.Controller) *MockDownloadAPIClient {
	mock := &MockDownloadAPIClient{ctrl: ctrl}
	mock.recorder = &MockDownloadAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadAPIClient) EXPECT() *MockDownloadAPIClientMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockDownloadAPIClient) GetObject(arg0 context.Context, arg1 *s3.GetObjectInput, arg2 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockDownloadAPIClientMockRecorder) GetObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockDownloadAPIClient)(nil).GetObject), varargs...)
}
