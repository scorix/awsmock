// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go-v2/feature/s3/manager (interfaces: UploadAPIClient,ListObjectsV2APIClient,HeadBucketAPIClient,DownloadAPIClient,DeleteObjectsAPIClient)

// Package s3mock is a generated GoMock package.
package s3mock

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// MockUploadAPIClient is a mock of UploadAPIClient interface.
type MockUploadAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockUploadAPIClientMockRecorder
}

// MockUploadAPIClientMockRecorder is the mock recorder for MockUploadAPIClient.
type MockUploadAPIClientMockRecorder struct {
	mock *MockUploadAPIClient
}

// NewMockUploadAPIClient creates a new mock instance.
func NewMockUploadAPIClient(ctrl *gomock.Controller) *MockUploadAPIClient {
	mock := &MockUploadAPIClient{ctrl: ctrl}
	mock.recorder = &MockUploadAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadAPIClient) EXPECT() *MockUploadAPIClientMockRecorder {
	return m.recorder
}

// AbortMultipartUpload mocks base method.
func (m *MockUploadAPIClient) AbortMultipartUpload(arg0 context.Context, arg1 *s3.AbortMultipartUploadInput, arg2 ...func(*s3.Options)) (*s3.AbortMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AbortMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.AbortMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AbortMultipartUpload indicates an expected call of AbortMultipartUpload.
func (mr *MockUploadAPIClientMockRecorder) AbortMultipartUpload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortMultipartUpload", reflect.TypeOf((*MockUploadAPIClient)(nil).AbortMultipartUpload), varargs...)
}

// CompleteMultipartUpload mocks base method.
func (m *MockUploadAPIClient) CompleteMultipartUpload(arg0 context.Context, arg1 *s3.CompleteMultipartUploadInput, arg2 ...func(*s3.Options)) (*s3.CompleteMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.CompleteMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteMultipartUpload indicates an expected call of CompleteMultipartUpload.
func (mr *MockUploadAPIClientMockRecorder) CompleteMultipartUpload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteMultipartUpload", reflect.TypeOf((*MockUploadAPIClient)(nil).CompleteMultipartUpload), varargs...)
}

// CreateMultipartUpload mocks base method.
func (m *MockUploadAPIClient) CreateMultipartUpload(arg0 context.Context, arg1 *s3.CreateMultipartUploadInput, arg2 ...func(*s3.Options)) (*s3.CreateMultipartUploadOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultipartUpload", varargs...)
	ret0, _ := ret[0].(*s3.CreateMultipartUploadOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipartUpload indicates an expected call of CreateMultipartUpload.
func (mr *MockUploadAPIClientMockRecorder) CreateMultipartUpload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipartUpload", reflect.TypeOf((*MockUploadAPIClient)(nil).CreateMultipartUpload), varargs...)
}

// PutObject mocks base method.
func (m *MockUploadAPIClient) PutObject(arg0 context.Context, arg1 *s3.PutObjectInput, arg2 ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockUploadAPIClientMockRecorder) PutObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockUploadAPIClient)(nil).PutObject), varargs...)
}

// UploadPart mocks base method.
func (m *MockUploadAPIClient) UploadPart(arg0 context.Context, arg1 *s3.UploadPartInput, arg2 ...func(*s3.Options)) (*s3.UploadPartOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadPart", varargs...)
	ret0, _ := ret[0].(*s3.UploadPartOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadPart indicates an expected call of UploadPart.
func (mr *MockUploadAPIClientMockRecorder) UploadPart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPart", reflect.TypeOf((*MockUploadAPIClient)(nil).UploadPart), varargs...)
}

// MockListObjectsV2APIClient is a mock of ListObjectsV2APIClient interface.
type MockListObjectsV2APIClient struct {
	ctrl     *gomock.Controller
	recorder *MockListObjectsV2APIClientMockRecorder
}

// MockListObjectsV2APIClientMockRecorder is the mock recorder for MockListObjectsV2APIClient.
type MockListObjectsV2APIClientMockRecorder struct {
	mock *MockListObjectsV2APIClient
}

// NewMockListObjectsV2APIClient creates a new mock instance.
func NewMockListObjectsV2APIClient(ctrl *gomock.Controller) *MockListObjectsV2APIClient {
	mock := &MockListObjectsV2APIClient{ctrl: ctrl}
	mock.recorder = &MockListObjectsV2APIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListObjectsV2APIClient) EXPECT() *MockListObjectsV2APIClientMockRecorder {
	return m.recorder
}

// ListObjectsV2 mocks base method.
func (m *MockListObjectsV2APIClient) ListObjectsV2(arg0 context.Context, arg1 *s3.ListObjectsV2Input, arg2 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectsV2", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsV2 indicates an expected call of ListObjectsV2.
func (mr *MockListObjectsV2APIClientMockRecorder) ListObjectsV2(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsV2", reflect.TypeOf((*MockListObjectsV2APIClient)(nil).ListObjectsV2), varargs...)
}

// MockHeadBucketAPIClient is a mock of HeadBucketAPIClient interface.
type MockHeadBucketAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockHeadBucketAPIClientMockRecorder
}

// MockHeadBucketAPIClientMockRecorder is the mock recorder for MockHeadBucketAPIClient.
type MockHeadBucketAPIClientMockRecorder struct {
	mock *MockHeadBucketAPIClient
}

// NewMockHeadBucketAPIClient creates a new mock instance.
func NewMockHeadBucketAPIClient(ctrl *gomock.Controller) *MockHeadBucketAPIClient {
	mock := &MockHeadBucketAPIClient{ctrl: ctrl}
	mock.recorder = &MockHeadBucketAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeadBucketAPIClient) EXPECT() *MockHeadBucketAPIClientMockRecorder {
	return m.recorder
}

// HeadBucket mocks base method.
func (m *MockHeadBucketAPIClient) HeadBucket(arg0 context.Context, arg1 *s3.HeadBucketInput, arg2 ...func(*s3.Options)) (*s3.HeadBucketOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBucket", varargs...)
	ret0, _ := ret[0].(*s3.HeadBucketOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBucket indicates an expected call of HeadBucket.
func (mr *MockHeadBucketAPIClientMockRecorder) HeadBucket(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBucket", reflect.TypeOf((*MockHeadBucketAPIClient)(nil).HeadBucket), varargs...)
}

// MockDownloadAPIClient is a mock of DownloadAPIClient interface.
type MockDownloadAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadAPIClientMockRecorder
}

// MockDownloadAPIClientMockRecorder is the mock recorder for MockDownloadAPIClient.
type MockDownloadAPIClientMockRecorder struct {
	mock *MockDownloadAPIClient
}

// NewMockDownloadAPIClient creates a new mock instance.
func NewMockDownloadAPIClient(ctrl *gomock.Controller) *MockDownloadAPIClient {
	mock := &MockDownloadAPIClient{ctrl: ctrl}
	mock.recorder = &MockDownloadAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadAPIClient) EXPECT() *MockDownloadAPIClientMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockDownloadAPIClient) GetObject(arg0 context.Context, arg1 *s3.GetObjectInput, arg2 ...func(*s3.Options)) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObject", varargs...)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockDownloadAPIClientMockRecorder) GetObject(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockDownloadAPIClient)(nil).GetObject), varargs...)
}

// MockDeleteObjectsAPIClient is a mock of DeleteObjectsAPIClient interface.
type MockDeleteObjectsAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteObjectsAPIClientMockRecorder
}

// MockDeleteObjectsAPIClientMockRecorder is the mock recorder for MockDeleteObjectsAPIClient.
type MockDeleteObjectsAPIClientMockRecorder struct {
	mock *MockDeleteObjectsAPIClient
}

// NewMockDeleteObjectsAPIClient creates a new mock instance.
func NewMockDeleteObjectsAPIClient(ctrl *gomock.Controller) *MockDeleteObjectsAPIClient {
	mock := &MockDeleteObjectsAPIClient{ctrl: ctrl}
	mock.recorder = &MockDeleteObjectsAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteObjectsAPIClient) EXPECT() *MockDeleteObjectsAPIClientMockRecorder {
	return m.recorder
}

// DeleteObjects mocks base method.
func (m *MockDeleteObjectsAPIClient) DeleteObjects(arg0 context.Context, arg1 *s3.DeleteObjectsInput, arg2 ...func(*s3.Options)) (*s3.DeleteObjectsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteObjects", varargs...)
	ret0, _ := ret[0].(*s3.DeleteObjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteObjects indicates an expected call of DeleteObjects.
func (mr *MockDeleteObjectsAPIClientMockRecorder) DeleteObjects(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObjects", reflect.TypeOf((*MockDeleteObjectsAPIClient)(nil).DeleteObjects), varargs...)
}
